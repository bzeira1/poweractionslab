# GitHub Actions workflow: Plugin CI/CD for Dataverse solution
# This workflow exports a solution from the Feature environment, compares the
# DLL ºs embedded Git hash with the feature‚Äëbranch tip, and‚Äîif they match‚Äîimports
# the solution into the Dev environment.
#
# Prerequisites (stored as encrypted repo or org secrets):
#   POWERPLATFORM_CLIENT_ID ‚Äì service principal / app registration clientId
#   POWERPLATFORM_TENANT_ID ‚Äì Azure AD tenant GUID
#   PowerPlatformSPN        ‚Äì client secret for the service principal
#
name: Plugin CI/CD

on:
  pull_request:
    branches:
      - develop
  workflow_dispatch: # Allow manual runs

jobs:
  export-feature-env:
    name: Export Solution from Feature ENV
    runs-on: windows-latest

    steps:
      - name: ‚¨áÔ∏è  Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Pull full history for Git operations

      - name: üîç Extract feature branch name
        id: branch-name
        run: |
          echo "Feature branch: ${{ github.event.pull_request.head.ref }}"
          echo "FEATURE_BRANCH=${{ github.event.pull_request.head.ref }}" >> $Env:GITHUB_ENV
        shell: pwsh

      - name: üõ†Ô∏è  Install Power Platform CLI
        run: |
          dotnet tool update --global Microsoft.PowerApps.CLI.Tool
          "${Env:USERPROFILE}\.dotnet\tools" | Out-File -Append -Encoding utf8 $Env:GITHUB_PATH
          pac
        shell: pwsh

      - name: üîê Authenticate with Power Platform (Feature ENV)
        run: |
          pac auth create `
            --name "FeatureENV" `
            --environment "https://org336acdfe.crm4.dynamics.com" `
            --applicationId  "${{ secrets.POWERPLATFORM_CLIENT_ID }}" `
            --clientSecret   "${{ secrets.PowerPlatformSPN }}" `
            --tenant         "${{ secrets.POWERPLATFORM_TENANT_ID }}"
        shell: pwsh

      - name: üì¶ Export solution from Feature ENV
        run: |
          pac solution export `
            --name "plugin" `
            --path exported-solution.zip `
            --managed false `
            --include customization,isvconfig
        shell: pwsh

      - name: üî¨ Extract Git commit hash from exported DLL
        run: |
          Expand-Archive -Path exported-solution.zip -DestinationPath extracted-solution

          $dllPath = (Get-ChildItem -Path "extracted-solution\PluginAssemblies" -Recurse -Filter "PowerPlatformPluginLab.dll").FullName
          if (-not $dllPath) { Write-Error "DLL file not found"; exit 1 }

          $assembly = [System.Reflection.Assembly]::LoadFile($dllPath)
          $stream   = $assembly.GetManifestResourceStream('gitversion.txt')
          if ($stream -eq $null) { Write-Error "gitversion.txt not found"; exit 1 }

          $content = (New-Object System.IO.StreamReader $stream).ReadToEnd().Trim()
          $stream.Close()

          Set-Content -Path extracted-commit-hash.txt -Value $content
          Write-Host "Extracted commit hash: $content"
        shell: pwsh

      - name: ‚òÅÔ∏è Upload commit hash artifact
        uses: actions/upload-artifact@v4
        with:
          name: feature-commit-hash
          path: extracted-commit-hash.txt

      - name: ‚òÅÔ∏è Upload exported solution artifact
        uses: actions/upload-artifact@v4
        with:
          name: exported-solution
          path: exported-solution.zip

  compare-git-hashes:
    name: Compare Git hashes
    needs: export-feature-env
    runs-on: ubuntu-latest
    outputs:
      MATCHED: ${{ steps.compare.outputs.MATCHED }}

    steps:
      - name: ‚¨áÔ∏è  Checkout feature branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: üìù Get latest commit from feature branch
        id: feature-commit
        run: |
          echo "FEATURE_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: ‚¨áÔ∏è  Download commit‚Äëhash artifact
        uses: actions/download-artifact@v4
        with:
          name: feature-commit-hash
          path: feature-hash

      - name: üîÑ Read commit hash from DLL
        id: feature-hash
        run: |
          EXTRACTED_COMMIT=$(cat feature-hash/extracted-commit-hash.txt | tr -d '\r')
          echo "EXTRACTED_COMMIT=$EXTRACTED_COMMIT" >> $GITHUB_OUTPUT

      - name: ‚úÖ Compare hashes
        id: compare
        run: |
          echo "Feature branch commit:  ${{ steps.feature-commit.outputs.FEATURE_COMMIT }}"
          echo "Extracted DLL commit:  ${{ steps.feature-hash.outputs.EXTRACTED_COMMIT }}"

          if [ "${{ steps.feature-commit.outputs.FEATURE_COMMIT }}" = "${{ steps.feature-hash.outputs.EXTRACTED_COMMIT }}" ]; then
            echo "MATCHED=true"  >> $GITHUB_OUTPUT
          else
            echo "MATCHED=false" >> $GITHUB_OUTPUT
          fi

      - name: üö® Fail if hashes mismatch
        if: steps.compare.outputs.MATCHED == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Git hashes do not match! Ensure the feature branch was properly merged into develop.')

  promote-to-dev:
    name: Promote solution to Dev ENV
    needs: compare-git-hashes
    if: needs.compare-git-hashes.outputs.MATCHED == 'true'
    runs-on: windows-latest

    steps:
      - name: ‚¨áÔ∏è  Download exported solution
        uses: actions/download-artifact@v4
        with:
          name: exported-solution
          path: .

      - name: üõ†Ô∏è  Install Power Platform CLI
        run: |
          dotnet tool update --global Microsoft.PowerApps.CLI.Tool
          "${Env:USERPROFILE}\.dotnet\tools" | Out-File -Append -Encoding utf8 $Env:GITHUB_PATH
          pac
        shell: pwsh

      - name: üîê Authenticate with Power Platform (Dev ENV)
        run: |
          pac auth create `
            --name "DevENV" `
            --environment "https://orga129dc5e.crm4.dynamics.com" `
            --applicationId  "${{ secrets.POWERPLATFORM_CLIENT_ID }}" `
            --clientSecret   "${{ secrets.PowerPlatformSPN }}" `
            --tenant         "${{ secrets.POWERPLATFORM_TENANT_ID }}"
        shell: pwsh

      - name: üöÄ Import solution into Dev ENV
        run: |
          pac solution import --path exported-solution.zip
        shell: pwsh
